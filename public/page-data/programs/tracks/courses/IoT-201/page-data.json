{"componentChunkName":"component---src-templates-course-js","path":"/programs/tracks/courses/IoT-201/","result":{"pageContext":{"course":{"courseNumber":"IoT-201","title":"Embedded Programming with Rust","description":{"childMarkdownRemark":{"html":"<p>An embedded system is a microcontroller with a dedicated function within a larger mechanical or electrical system, often with real-time computing constraints. It is embedded as part of a complete device often including hardware and mechanical parts. Embedded systems control many devices in common use today. 98% of all microprocessors manufactured are used in embedded systems. Embedded systems are commonly found in consumer, industrial, automotive, medical, commercial and military applications. In this quarter we will learn embedded systems programming using Rust. We will learn how to write, build, flash and debug an \"embedded\" (Rust) program. Also the functionality (\"peripherals\") commonly found in microcontrollers: digital input and output, Pulse Width Modulation (PWM), Analog to Digital Converters (ADC), common communication protocols like Serial, I2C and SPI, etc. Multitasking concepts: cooperative vs preemptive multitasking, interrupts, schedulers, etc. Control systems concepts: sensors, calibration, digital filters, actuators, open loop control, closed loop control, etc. </p>"}},"certification":null,"textBooks":[{"title":"The Embedded Discovery Book","authors":"The Embedded Rust Community","url":"https://docs.rust-embedded.org/discovery/"}],"referenceBooks":null,"sections":[{"title":"Advanced Rust Programming ","serialNumber":1,"weeks":"1, 2, and 3","quiz":{"title":"Advanced Rust Programming Quiz","week":4},"lineItem":[{"title":"Generics, Traits, Closures, and Threads","shortDescription":{"childMarkdownRemark":{"html":"<p>Topics 10.1 of <a href=\"https://doc.rust-lang.org/nightly/book/\">https://doc.rust-lang.org/nightly/book/</a>\n<a href=\"https://doc.rust-lang.org/nightly/book/ch10-02-traits.html#traits-as-parameters\">https://doc.rust-lang.org/nightly/book/ch10-02-traits.html#traits-as-parameters</a>\nTopics 10.2, 10.3, 13.1, and 16.1 of <a href=\"https://doc.rust-lang.org/nightly/book/\">https://doc.rust-lang.org/nightly/book/</a></p>"}}}]},{"title":"Fundamentals of Embedded Rust Programming ","serialNumber":2,"weeks":"4, 5, and 6","quiz":{"title":"Embedded Rust Midterm Quiz 1","week":7},"lineItem":[{"title":"Hello World, LED, and Registers","shortDescription":{"childMarkdownRemark":{"html":"<p>Chapters 1, 5, and 6 of:\n<a href=\"https://docs.rust-embedded.org/discovery/index.html\">https://docs.rust-embedded.org/discovery/index.html</a> </p>\n<p><a href=\"https://www.mathsisfun.com/binary-number-system.html\">https://www.mathsisfun.com/binary-number-system.html</a> </p>\n<p><a href=\"https://doc.rust-lang.org/std/fmt/trait.Binary.html\">https://doc.rust-lang.org/std/fmt/trait.Binary.html</a> </p>\n<p><a href=\"https://www.tutorialspoint.com/rust/rust_bitwise_operators\">https://www.tutorialspoint.com/rust/rust_bitwise_operators</a>  </p>\n<p><a href=\"https://doc.rust-lang.org/nightly/book/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer\">https://doc.rust-lang.org/nightly/book/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer</a>  </p>\n<p>Note: Dereferencing a pointer means getting the value that is stored in the memory location pointed by the pointer. The operator * is used to do this, and is called the dereferencing operator.</p>\n<p><a href=\"https://docs.rust-embedded.org/discovery/07-registers/index.html\">https://docs.rust-embedded.org/discovery/07-registers/index.html</a> </p>\n<p>Note: Only topic 7 is included in this quiz; topics 7.1 to 7.5 are not included in this quiz.</p>"}}}]},{"title":"Advanced Embedded Rust Programming ","serialNumber":3,"weeks":"7, 8, 9, 10, 11, and 12","quiz":{"title":"Embedded Rust Final","week":13},"lineItem":[{"title":"Advanced LEDs, Clocks, Timers, and Serial Communication ","shortDescription":{"childMarkdownRemark":{"html":"<p>Sections 7.1 to 7.5 of:\n<a href=\"https://docs.rust-embedded.org/discovery/index.html\">https://docs.rust-embedded.org/discovery/index.html</a> </p>\n<p>Chapters 8, 9 and 10 of:\n<a href=\"https://docs.rust-embedded.org/discovery/index.html\">https://docs.rust-embedded.org/discovery/index.html</a> </p>"}}},{"title":"USART, I2C,  and LED Compass","shortDescription":{"childMarkdownRemark":{"html":"<p>Chapters 11, 14, 15, and 16 of:\n<a href=\"https://docs.rust-embedded.org/discovery/index.html\">https://docs.rust-embedded.org/discovery/index.html</a> </p>"}}}]}],"quarter":2,"track":[{"courses":[{"quarter":1},{"quarter":2},{"quarter":3},{"quarter":4}]}]},"track":{"title":"IoT Technical Track","slug":"iot","objective":{"childMarkdownRemark":{"html":"<p>Develop IoT Edge, Cloud and Embeded applications. We will also cover developing Conversational and Graphical User Interfaces. Conversational interfaces will be devloped using Dialogflow and GUI using web assembly. This technical track will provide a solid foundation in IoT concepts and technologies. Innovation and application development track will supplement the IoT technologies and will develop the necessary skills to build end-to-end IoT applications.</p>"}},"certifications":null,"description":{"json":{"data":{},"content":[{"data":{},"content":[{"data":{},"marks":[],"value":"Core Programming Languages: Rust and Web Assembly","nodeType":"text"}],"nodeType":"paragraph"},{"data":{},"content":[{"data":{},"marks":[],"value":"Embedded Programming: Embedded Rust\nMain Cloud Framework: Kubernetes","nodeType":"text"}],"nodeType":"paragraph"},{"data":{},"content":[{"data":{},"marks":[],"value":"Main Edge Framework: KubeEdge","nodeType":"text"}],"nodeType":"paragraph"},{"data":{},"content":[{"data":{},"marks":[],"value":"Conversational voice user interfaces: Google Assistant ","nodeType":"text"}],"nodeType":"paragraph"},{"data":{},"content":[{"data":{},"marks":[],"value":"Main Libraries and Frameworks: Asynchronous Rust, Hyper, MongoDB, Yew, TensorFlow, and eWasm.","nodeType":"text"}],"nodeType":"paragraph"},{"data":{},"content":[{"data":{},"marks":[],"value":"\n\n\n\n\n\n","nodeType":"text"}],"nodeType":"paragraph"}],"nodeType":"document"}},"courses":[{"courseNumber":"IoT-101","title":"Intro to IoT and Fundamentals of Programming using Rust","description":{"childMarkdownRemark":{"html":"<p>In this course, we will start by introducing IoT and embedded systems and move on to learn the Rust systems programming language. We'll learn about basic programming concepts using Rust, then we will explore key Rust concepts in depth, such as ownership, the type system, error handling, and fearless concurrency. You'll also learn how to make your programs interactive and how to test your code safely before adding it to a project. It is a fast-paced, thorough introduction to programming with Rust that will have you writing programs, solving problems, and making things that work in no time.</p>"}},"certification":null,"textBooks":[{"title":"The Book","authors":"Rust Community","url":"https://doc.rust-lang.org/nightly/book/"}],"referenceBooks":null,"sections":[{"title":"Introduction to Internet of Things and Embedded Systems ","serialNumber":1,"weeks":"1 and 2","quiz":{"title":"Introduction to Internet of Things (IoT) Quiz","week":3},"lineItem":[{"title":"IoT Overview","shortDescription":{"childMarkdownRemark":{"html":"<p>What is the Fourth Industrial Revolution?\nWhat is IoT?\nEmbedded Systems\nHardware and Software for IoT\nEdge and Cloud Computing\nThe future of IoT is AI\nBlockchain in the Internet of Things?\nIoT + AI + Blockchain: The Fourth Industrial Revolution has begun</p>"}}}]},{"title":"Rust Programming Basics","serialNumber":2,"weeks":"3, 4, 5, 5, 7, and 8","quiz":{"title":"Rust Midterm","week":8},"lineItem":[{"title":"Common Programming Concepts, Ownership, and Structs","shortDescription":{"childMarkdownRemark":{"html":"<p>Read and Watch: <a href=\"https://hub.packtpub.com/rust-is-the-future-of-systems-programming-c-is-the-new-assembly-intel-principal-engineer-josh-triplett/\">https://hub.packtpub.com/rust-is-the-future-of-systems-programming-c-is-the-new-assembly-intel-principal-engineer-josh-triplett/</a></p>\n<p>Chapter 3, 4.1, 4.2, and 5 of <a href=\"https://doc.rust-lang.org/nightly/book/\">https://doc.rust-lang.org/nightly/book/</a></p>"}}}]},{"title":"Rust Programming Intermediate","serialNumber":3,"weeks":"9, 10, 11, 12, and 13","quiz":{"title":"Rust Final Quiz","week":13},"lineItem":[{"title":"Enums, Packages, Collections, and Error Handling","shortDescription":{"childMarkdownRemark":{"html":"<p>Chapter 6.1, 6.2, 7, 8, and 9 of <a href=\"https://doc.rust-lang.org/nightly/book/\">https://doc.rust-lang.org/nightly/book/</a></p>"}}}]}],"quarter":1,"track":[{"courses":[{"quarter":1},{"quarter":2},{"quarter":3},{"quarter":4}]}]},{"courseNumber":"IoT-201","title":"Embedded Programming with Rust","description":{"childMarkdownRemark":{"html":"<p>An embedded system is a microcontroller with a dedicated function within a larger mechanical or electrical system, often with real-time computing constraints. It is embedded as part of a complete device often including hardware and mechanical parts. Embedded systems control many devices in common use today. 98% of all microprocessors manufactured are used in embedded systems. Embedded systems are commonly found in consumer, industrial, automotive, medical, commercial and military applications. In this quarter we will learn embedded systems programming using Rust. We will learn how to write, build, flash and debug an \"embedded\" (Rust) program. Also the functionality (\"peripherals\") commonly found in microcontrollers: digital input and output, Pulse Width Modulation (PWM), Analog to Digital Converters (ADC), common communication protocols like Serial, I2C and SPI, etc. Multitasking concepts: cooperative vs preemptive multitasking, interrupts, schedulers, etc. Control systems concepts: sensors, calibration, digital filters, actuators, open loop control, closed loop control, etc. </p>"}},"certification":null,"textBooks":[{"title":"The Embedded Discovery Book","authors":"The Embedded Rust Community","url":"https://docs.rust-embedded.org/discovery/"}],"referenceBooks":null,"sections":[{"title":"Advanced Rust Programming ","serialNumber":1,"weeks":"1, 2, and 3","quiz":{"title":"Advanced Rust Programming Quiz","week":4},"lineItem":[{"title":"Generics, Traits, Closures, and Threads","shortDescription":{"childMarkdownRemark":{"html":"<p>Topics 10.1 of <a href=\"https://doc.rust-lang.org/nightly/book/\">https://doc.rust-lang.org/nightly/book/</a>\n<a href=\"https://doc.rust-lang.org/nightly/book/ch10-02-traits.html#traits-as-parameters\">https://doc.rust-lang.org/nightly/book/ch10-02-traits.html#traits-as-parameters</a>\nTopics 10.2, 10.3, 13.1, and 16.1 of <a href=\"https://doc.rust-lang.org/nightly/book/\">https://doc.rust-lang.org/nightly/book/</a></p>"}}}]},{"title":"Fundamentals of Embedded Rust Programming ","serialNumber":2,"weeks":"4, 5, and 6","quiz":{"title":"Embedded Rust Midterm Quiz 1","week":7},"lineItem":[{"title":"Hello World, LED, and Registers","shortDescription":{"childMarkdownRemark":{"html":"<p>Chapters 1, 5, and 6 of:\n<a href=\"https://docs.rust-embedded.org/discovery/index.html\">https://docs.rust-embedded.org/discovery/index.html</a> </p>\n<p><a href=\"https://www.mathsisfun.com/binary-number-system.html\">https://www.mathsisfun.com/binary-number-system.html</a> </p>\n<p><a href=\"https://doc.rust-lang.org/std/fmt/trait.Binary.html\">https://doc.rust-lang.org/std/fmt/trait.Binary.html</a> </p>\n<p><a href=\"https://www.tutorialspoint.com/rust/rust_bitwise_operators\">https://www.tutorialspoint.com/rust/rust_bitwise_operators</a>  </p>\n<p><a href=\"https://doc.rust-lang.org/nightly/book/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer\">https://doc.rust-lang.org/nightly/book/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer</a>  </p>\n<p>Note: Dereferencing a pointer means getting the value that is stored in the memory location pointed by the pointer. The operator * is used to do this, and is called the dereferencing operator.</p>\n<p><a href=\"https://docs.rust-embedded.org/discovery/07-registers/index.html\">https://docs.rust-embedded.org/discovery/07-registers/index.html</a> </p>\n<p>Note: Only topic 7 is included in this quiz; topics 7.1 to 7.5 are not included in this quiz.</p>"}}}]},{"title":"Advanced Embedded Rust Programming ","serialNumber":3,"weeks":"7, 8, 9, 10, 11, and 12","quiz":{"title":"Embedded Rust Final","week":13},"lineItem":[{"title":"Advanced LEDs, Clocks, Timers, and Serial Communication ","shortDescription":{"childMarkdownRemark":{"html":"<p>Sections 7.1 to 7.5 of:\n<a href=\"https://docs.rust-embedded.org/discovery/index.html\">https://docs.rust-embedded.org/discovery/index.html</a> </p>\n<p>Chapters 8, 9 and 10 of:\n<a href=\"https://docs.rust-embedded.org/discovery/index.html\">https://docs.rust-embedded.org/discovery/index.html</a> </p>"}}},{"title":"USART, I2C,  and LED Compass","shortDescription":{"childMarkdownRemark":{"html":"<p>Chapters 11, 14, 15, and 16 of:\n<a href=\"https://docs.rust-embedded.org/discovery/index.html\">https://docs.rust-embedded.org/discovery/index.html</a> </p>"}}}]}],"quarter":2,"track":[{"courses":[{"quarter":1},{"quarter":2},{"quarter":3},{"quarter":4}]}]},{"courseNumber":"IoT-301","title":"Cloud Native and Edge Computing for IoT","description":{"childMarkdownRemark":{"html":"<p>In this course we will learn how to develop cloud-based microservies using Docker, Kubernetes, Async Rust, Hyper and Diesel. We will also cover Edge Computing using KubeEdge.  </p>"}},"certification":null,"textBooks":[{"title":"Kubernetes in Action","authors":"Marko Lukša","url":"https://www.manning.com/books/kubernetes-in-action"}],"referenceBooks":null,"sections":[{"title":"Asynchronous Rust Programming ","serialNumber":1,"weeks":"1, 2, and 3","quiz":{"title":"Async Rust Programming Quiz","week":4},"lineItem":[{"title":"Tokio","shortDescription":{"childMarkdownRemark":{"html":"<p>Sections 1.1, and 1.3 from:\n<a href=\"https://rust-lang.github.io/async-book/\">https://rust-lang.github.io/async-book/</a></p>\n<p><a href=\"https://thomashartmann.dev/blog/async-rust/\">https://thomashartmann.dev/blog/async-rust/</a></p>\n<p><a href=\"https://tokio.rs/docs/getting-started/hello-world/\">https://tokio.rs/docs/getting-started/hello-world/</a></p>\n<p><a href=\"https://tokio.rs/docs/getting-started/futures/\">https://tokio.rs/docs/getting-started/futures/</a></p>\n<p><a href=\"https://tokio.rs/docs/getting-started/runtime/\">https://tokio.rs/docs/getting-started/runtime/</a></p>"}}}]},{"title":"Asynchronous Microservices","serialNumber":2,"weeks":"4, 5, and 6","quiz":{"title":"Asynchronous Microservices Quiz ","week":7},"lineItem":[{"title":"Hyper and MongoDB","shortDescription":{"childMarkdownRemark":{"html":"<p><a href=\"https://towardsdatascience.com/microservice-architecture-a-brief-overview-and-why-you-should-use-it-in-your-next-project-a17b6e19adfd\">https://towardsdatascience.com/microservice-architecture-a-brief-overview-and-why-you-should-use-it-in-your-next-project-a17b6e19adfd</a></p>\n<p><a href=\"https://hyper.rs/guides/server/hello-world/\">https://hyper.rs/guides/server/hello-world/</a></p>\n<p><a href=\"https://hyper.rs/guides/server/echo/\">https://hyper.rs/guides/server/echo/</a></p>\n<p><a href=\"https://github.com/seanmonstar/reqwest\">https://github.com/seanmonstar/reqwest</a></p>\n<p><a href=\"https://hyper.rs/guides/server/graceful-shutdown/\">https://hyper.rs/guides/server/graceful-shutdown/</a></p>\n<p><a href=\"https://docs.mongodb.com/manual/introduction/\">https://docs.mongodb.com/manual/introduction/</a></p>\n<p><a href=\"https://docs.mongodb.com/manual/tutorial/getting-started/\">https://docs.mongodb.com/manual/tutorial/getting-started/</a></p>\n<p><a href=\"https://docs.mongodb.com/manual/tutorial/update-documents/\">https://docs.mongodb.com/manual/tutorial/update-documents/</a></p>\n<p><a href=\"https://docs.mongodb.com/manual/tutorial/query-documents/\">https://docs.mongodb.com/manual/tutorial/query-documents/</a></p>\n<p><a href=\"https://github.com/mongodb/mongo-rust-driver\">https://github.com/mongodb/mongo-rust-driver</a></p>\n<p><a href=\"https://towardsdatascience.com/effective-microservices-10-best-practices-c6e4ba0c6ee2\">https://towardsdatascience.com/effective-microservices-10-best-practices-c6e4ba0c6ee2</a></p>"}}}]},{"title":"Introduction to Kubernetes","serialNumber":3,"weeks":"7, and 8","quiz":{"title":"Kubernetes Core Concepts Quiz","week":9},"lineItem":[{"title":"Core Concepts","shortDescription":{"childMarkdownRemark":{"html":"<p>Chapter 2 and 3 of Kubernetes in Action</p>"}}}]},{"title":"Edge Computing","serialNumber":4,"weeks":"8, 9, 10, 11, 12, and 13","quiz":{"title":"Edge Computing Quiz","week":13},"lineItem":[{"title":"Programming the Edge using Raspberry Pi 4 Model B ","shortDescription":{"childMarkdownRemark":{"html":"<p><a href=\"https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/\">https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/</a>\n<a href=\"https://www.youtube.com/watch?v=KJV9kL-xouc\">https://www.youtube.com/watch?v=KJV9kL-xouc</a>\n<a href=\"https://opensource.com/article/19/3/physical-computing-rust-raspberry-pi\">https://opensource.com/article/19/3/physical-computing-rust-raspberry-pi</a>\n<a href=\"https://github.com/golemparts/rppal/\">https://github.com/golemparts/rppal/</a></p>\n<p>Where to buy? (Optional)\n<a href=\"https://hobbytronics.pk/product/raspberry-pi-4/\">https://hobbytronics.pk/product/raspberry-pi-4/</a></p>\n<p>Note:\nFor those who cannot afford can use one of these:\n<a href=\"https://windowsreport.com/raspberry-pi-emulators/\">https://windowsreport.com/raspberry-pi-emulators/</a> </p>"}}},{"title":"Edge Computing with KubeEdge","shortDescription":{"childMarkdownRemark":{"html":"<p><a href=\"https://kubeedge.readthedocs.io/en/latest/\">https://kubeedge.readthedocs.io/en/latest/</a>\n<a href=\"https://thenewstack.io/kubeedge-extends-the-power-of-kubernetes-to-the-edge/\">https://thenewstack.io/kubeedge-extends-the-power-of-kubernetes-to-the-edge/</a>\n<a href=\"https://kubeedge.readthedocs.io/en/latest/setup/installer_setup.html\">https://kubeedge.readthedocs.io/en/latest/setup/installer_setup.html</a>\n<a href=\"https://kubeedge.readthedocs.io/en/latest/modules/kubeedge.html\">https://kubeedge.readthedocs.io/en/latest/modules/kubeedge.html</a>\n<a href=\"https://kubeedge.readthedocs.io/en/latest/modules/edge/edged.html\">https://kubeedge.readthedocs.io/en/latest/modules/edge/edged.html</a>\n<a href=\"https://kubeedge.readthedocs.io/en/latest/modules/beehive.html\">https://kubeedge.readthedocs.io/en/latest/modules/beehive.html</a>\n<a href=\"https://github.com/kubeedge/examples\">https://github.com/kubeedge/examples</a> </p>"}}}]}],"quarter":3,"track":[{"courses":[{"quarter":1},{"quarter":2},{"quarter":3},{"quarter":4}]}]},{"courseNumber":"IoT-401","title":"Conversational and Graphical User Interfaces","description":{"childMarkdownRemark":{"html":"<p>In this course we will start by learning voice and text based natural conversational user interfaces by extending the functionality of the Google Assistant using Dialogflow.\nIn the second half of the course we will learn to build web apps using Web Assembly. Rust, WASM bindgen, web-sys, and Yew technologies will be used to build these applications. </p>"}},"certification":null,"textBooks":null,"referenceBooks":null,"sections":[{"title":"Conversational UI","serialNumber":1,"weeks":"1, 2, 3, 4, 5, and 6","quiz":{"title":"Dialogflow Quiz","week":7},"lineItem":[{"title":"Google Assistant Overview","shortDescription":{"childMarkdownRemark":{"html":"<p>Overview:\n<a href=\"https://developers.google.com/assistant/conversational/overview\">https://developers.google.com/assistant/conversational/overview</a></p>"}}},{"title":"Dialogflow","shortDescription":{"childMarkdownRemark":{"html":"<p><a href=\"https://cloud.google.com/dialogflow/docs\">https://cloud.google.com/dialogflow/docs</a></p>"}}}]},{"title":"Web Apps using Web Assembly","serialNumber":2,"weeks":"7, 8, 9, 10, 11, and 12","quiz":{"title":"Web Assembly using Rust Quiz","week":13},"lineItem":[{"title":"WASM Bindgen","shortDescription":{"childMarkdownRemark":{"html":"<p>1.1 to 1.9 and 1.21 from <a href=\"https://rustwasm.github.io/docs/wasm-bindgen/\">https://rustwasm.github.io/docs/wasm-bindgen/</a></p>"}}},{"title":"Web Apps using Web Assembly and Yew","shortDescription":{"childMarkdownRemark":{"html":"<p>Building web apps using Yew with Rust. We will cover setup, learn template, and build sample web apps.\n<a href=\"https://yew.rs/docs/\">https://yew.rs/docs/</a></p>"}}}]}],"quarter":4,"track":[{"courses":[{"quarter":1},{"quarter":2},{"quarter":3},{"quarter":4}]}]}]},"prereq":[{"courseNumber":"IoT-101","title":"Intro to IoT and Fundamentals of Programming using Rust","description":{"childMarkdownRemark":{"html":"<p>In this course, we will start by introducing IoT and embedded systems and move on to learn the Rust systems programming language. We'll learn about basic programming concepts using Rust, then we will explore key Rust concepts in depth, such as ownership, the type system, error handling, and fearless concurrency. You'll also learn how to make your programs interactive and how to test your code safely before adding it to a project. It is a fast-paced, thorough introduction to programming with Rust that will have you writing programs, solving problems, and making things that work in no time.</p>"}},"certification":null,"textBooks":[{"title":"The Book","authors":"Rust Community","url":"https://doc.rust-lang.org/nightly/book/"}],"referenceBooks":null,"sections":[{"title":"Introduction to Internet of Things and Embedded Systems ","serialNumber":1,"weeks":"1 and 2","quiz":{"title":"Introduction to Internet of Things (IoT) Quiz","week":3},"lineItem":[{"title":"IoT Overview","shortDescription":{"childMarkdownRemark":{"html":"<p>What is the Fourth Industrial Revolution?\nWhat is IoT?\nEmbedded Systems\nHardware and Software for IoT\nEdge and Cloud Computing\nThe future of IoT is AI\nBlockchain in the Internet of Things?\nIoT + AI + Blockchain: The Fourth Industrial Revolution has begun</p>"}}}]},{"title":"Rust Programming Basics","serialNumber":2,"weeks":"3, 4, 5, 5, 7, and 8","quiz":{"title":"Rust Midterm","week":8},"lineItem":[{"title":"Common Programming Concepts, Ownership, and Structs","shortDescription":{"childMarkdownRemark":{"html":"<p>Read and Watch: <a href=\"https://hub.packtpub.com/rust-is-the-future-of-systems-programming-c-is-the-new-assembly-intel-principal-engineer-josh-triplett/\">https://hub.packtpub.com/rust-is-the-future-of-systems-programming-c-is-the-new-assembly-intel-principal-engineer-josh-triplett/</a></p>\n<p>Chapter 3, 4.1, 4.2, and 5 of <a href=\"https://doc.rust-lang.org/nightly/book/\">https://doc.rust-lang.org/nightly/book/</a></p>"}}}]},{"title":"Rust Programming Intermediate","serialNumber":3,"weeks":"9, 10, 11, 12, and 13","quiz":{"title":"Rust Final Quiz","week":13},"lineItem":[{"title":"Enums, Packages, Collections, and Error Handling","shortDescription":{"childMarkdownRemark":{"html":"<p>Chapter 6.1, 6.2, 7, 8, and 9 of <a href=\"https://doc.rust-lang.org/nightly/book/\">https://doc.rust-lang.org/nightly/book/</a></p>"}}}]}],"quarter":1,"track":[{"courses":[{"quarter":1},{"quarter":2},{"quarter":3},{"quarter":4}]}]}]}}}